---
// Component imports
import Buttons from "./Buttons.astro"
import Info from "./Info.astro"
import Header from "./Header.astro"
import Images from "./Images.astro"
import Stats from "./Stats.astro"

type Subcategory = {
  content: string
  source: string
}

export type PlanetData = {
  name: string
  overview: Subcategory
  structure: Subcategory
  geology: Subcategory
  rotation: string
  revolution: string
  radius: string
  temperature: string
  images: {
    planet: string
    internal: string
    geology: string
    size: string
  }
}

type Props = {
  planetData: PlanetData
}

const { planetData } = Astro.props

// Color
const planetColor = `var(--accent-${planetData.name.toLowerCase()}-400)`
---

<Header planetData={planetData} />
<main class="container">
  <Buttons planetColor={planetColor} />
  <Images planetData={planetData} />
  <Info planetData={planetData} />
  <Stats planetData={planetData} />
</main>

<style lang="scss">
  @use "../sass/abstracts" as *;

  main {
    display: grid;
    grid-template-areas:
      "buttons"
      "images"
      "info"
      "stats";
    gap: 1.75rem;
    margin-block-end: 3rem;

    @include mq(medium) {
      grid-template-columns: repeat(2, 1fr);
      grid-template-areas:
        "images images"
        "info buttons"
        "stats stats";
      gap: 1.75rem 4.25rem;
      margin-block-start: 1.6875rem;
      margin-block-end: 2.25rem;
    }

    @include mq(large) {
      grid-template-columns: 2fr 1fr;
      grid-template-areas:
        "images info"
        "images buttons"
        "stats stats";
      gap: 1.125rem 7rem;
      margin-block-start: 4.375rem;
      margin-block-end: 3.5rem;
    }
  }
</style>

<script>
  // Page load
  window.addEventListener("DOMContentLoaded", () => {
    handlePlanetUI()
  })

  // View Transition
  document.addEventListener("astro:after-swap", () => {
    handlePlanetUI()
  })

  function handlePlanetUI() {
    // Variables
    const allBtns = [
      ...document.querySelectorAll(".btn"),
    ] as HTMLButtonElement[]
    const allImgs = [...document.querySelectorAll(".img")] as HTMLImageElement[]
    const allInfo = [
      ...document.querySelectorAll(".info__group"),
    ] as HTMLElement[]

    // Event-handler
    allBtns.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        if (e.target) {
          const clickedEl = e.target as HTMLElement
          const clickedBtn = clickedEl.closest("button")
          if (clickedBtn) handleButtonClick(clickedBtn)
        }
      })
    })

    // Functions
    function handleButtonClick(clickedBtn: HTMLButtonElement) {
      console.log("ok")
      if (clickedBtn.getAttribute("aria-selected") === "true") return

      const category = clickedBtn.querySelector(".category")?.textContent

      // handle buttons
      allBtns.forEach((btn) => {
        btn.setAttribute("aria-selected", "false")
      })
      clickedBtn.setAttribute("aria-selected", "true")

      // handle images
      if (category === "structure") {
        showImage("structure")
        hideImage("geology")
      } else if (category === "geology") {
        showImage("geology")
        hideImage("structure")
      } else {
        hideImage("structure")
        hideImage("geology")
      }

      // handle info
      allInfo.forEach((info) => {
        info.setAttribute("aria-hidden", "true")
      })
      const currInfo = allInfo.filter(
        (info) => info.getAttribute("data-category") === category
      )[0]
      currInfo.setAttribute("aria-hidden", "false")
    }

    // Helper functions
    function hideImage(imgCategory: string) {
      const img = allImgs.filter(
        (img) => img.getAttribute("data-category") === imgCategory
      )[0]
      img.setAttribute("aria-hidden", "true")
    }

    function showImage(imgCategory: string) {
      const img = allImgs.filter(
        (img) => img.getAttribute("data-category") === imgCategory
      )[0]
      img.setAttribute("aria-hidden", "false")
    }
  }
</script>
